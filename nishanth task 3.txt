1)sd card writin using arduino:
 SD card attached to SPI(serial peripheral interface) bus as follows:
 ** MOSI - pin 11
 ** MISO - pin 12
 ** CLK - pin 13
 ** CS - pin 4 (for MKRZero SD: SDCARD_SS_PIN)

The library used is called sd
MOSI - Master Out Slave In;
MISO - Master In Slave Out;
SCK - Clock signal from master to slave; SS - Slave Select

code from arduino.cc


File myFile;

void setup() {
  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }


  Serial.print("Initializing SD card...");

  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    while (1);
  }
  Serial.println("initialization done.");

  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  myFile = SD.open("test.txt", FILE_WRITE);

  // if the file opened okay, write to it:
  if (myFile) {
    Serial.print("Writing to test.txt...");
    myFile.println("testing 1, 2, 3.");
    // close the file:
    myFile.close();
    Serial.println("done.");
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");
  }

  // re-open the file for reading:
  myFile = SD.open("test.txt");
  if (myFile) {
    Serial.println("test.txt:");

    // read from the file until there's nothing else in it:
    while (myFile.available()) {
      Serial.write(myFile.read());
    }
    // close the file:
    myFile.close();
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");
  }
}

void loop() {
  // nothing happens after setup
}



The configuration files of every sector are expressed by 16 bytes in FAT16 and this is why it is named FAT16.
1)SpI generally takes place on digital pins 11, 12, and 13
2)Additionally, another pin must be used to select the SD card. This can be the hardware SS pin - pin 10 (on most Arduino boards) 

functions possible:
1)Card Info: Get info about your SD card.
2)Datalogger: Log data from three analog sensors to an SD card.
3)Dump File: Read a file from the SD card.
4)Files: Create and destroy an SD card file.
5)List Files: Print out the files in a directory on a SD card.
6)Read Write: Read and write data to and from an SD card.

syntax:
1)SD.begin(cspin)
intializes the sdlib and card.cspin is the chip select pin.giving cspin in the arguments is optional.

2)SD.exists(filename)
Tests whether a file or directory exists on the SD card.

3)SD.open(filepath)
SD.open(filepath, mode)
opens an existing  file from the sd card.

4)SD.remove(filename)
Remove a file from the SD card.

5)SD.rmdir(filename)
Remove a directory from the SD card. The directory must be empty.

6)file.available()
Check if there are any bytes available for reading from the file.

available() inherits from the Stream utility class.















#include <ESP8266WiFi.h>

const char* ssid     = "Jarvis";
const char* password = "987654321";
const int n=3;
int a=5;
int b=4;
int c=14;
int d=12;

IPAddress staticIP(192, 168, 43, 100+n ); //static ip for esp
IPAddress gateway(192, 168, 43, 1);
IPAddress subnet(255, 255, 255, 0); 
const int port=23456;
const char* ip="192.168.43.53";


void setup() {
  Serial.begin(9600);

  pinMode(a, OUTPUT);
  pinMode(b, OUTPUT);
  pinMode(c, OUTPUT);
  pinMode(d, OUTPUT); 
   
  // We start by connecting to a WiFi network
  Serial.print("Connecting to router ");
  
  WiFi.disconnect();  //Prevent connecting to wifi based on previous configuration
  WiFi.config(staticIP, subnet, gateway);
  WiFi.begin(ssid, password);
 
  WiFi.mode(WIFI_STA); //WiFi mode station (connect to wifi router only
  
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  digitalWrite(a, LOW);
  digitalWrite(b, LOW);
  digitalWrite(c, LOW);
  digitalWrite(d, LOW);

  delay(1000);
  Serial.print(n);
  Serial.print(") connecting to laptop :");

  // Use WiFiClient class to create TCP connections
  WiFiClient client1;
  if(WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    }
  }
    
  if (!client1.connect(ip, port)) {
    Serial.println("connection failed");
    return;
  }

  Serial.println("input check");

  unsigned long timeout = millis();
  while (client1.available() == 0) {
    if (millis() - timeout > 30000) {
      Serial.println(">>> laptop Timeout !");
      client1.stop();
      return;
    }
  }
  
  Serial.println("data obtained");
  // Read all the lines of the reply from server and print them to Serial
  while (client1.connected() || client1.available())
  {
   if (client1.available())
   {
    String line = client1.readStringUntil('\n');
    Serial.println(line);
    if(line[0]=='1')
     digitalWrite(a, HIGH);
    else
     digitalWrite(a, LOW);
    if(line[1]=='1') 
     digitalWrite(b, HIGH);
    else
     digitalWrite(b, LOW); 
    if(line[2]=='1') 
     digitalWrite(c, HIGH);
    else
     digitalWrite(c, LOW); 
    if(line[3]=='1') 
     digitalWrite(d, HIGH);
    else
     digitalWrite(d, LOW); 
   }
  }
  digitalWrite(a, LOW);
  digitalWrite(b, LOW);
  digitalWrite(c, LOW);
  digitalWrite(d, LOW);

  Serial.print(n);
  Serial.println(") closing connection");
}

 
#include <WiFi.h>        // Include the Wi-Fi library
 
const char* ssid     = "SSID";         // The SSID (name) of the Wi-Fi network you want to connect to
const char* password = "PASSWORD";     // The password of the Wi-Fi network
 
void setup() {
  Serial.begin(115200);         // Start the Serial communication to send messages to the computer
  delay(10);
  Serial.println('\n');
  
  WiFi.begin(ssid, password);             // Connect to the network
  Serial.print("Connecting to ");
  Serial.print(ssid);
 
  while (WiFi.status() != WL_CONNECTED) { // Wait for the Wi-Fi to connect
    delay(500);
    Serial.print('.');
  }
 
  Serial.println('\n');
  Serial.println("Connection established!");  
  Serial.print("IP address:\t");
  Serial.println(WiFi.localIP());         // Send the IP address of the ESP8266 to the computer
}
 
void loop() { 
  
}





3)blynk:


Blynk is an IoT (Internet of Things) platform using which you can easily and remotely control hardware. Additionally, you can also view sensor data, store the data, visualize the data etc. all over the internet.
Blynk App
Blynk Server
Blynk Libraries
use the blynk library from the example code we can run the led on and off
use the cmd to change the directory and set the button on of the blynk led then give blynk-ser.bat c Com3




4)thingspeak